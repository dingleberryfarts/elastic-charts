#########################################################################################################
# Handles running playwright tests when deployment is complete
#
# expected inputs via client_payload
#  - sha
#  - commit_sha
#  - environment
#  - environment_url
#  - deployment_id  (optional)
#########################################################################################################

name: e2e Tests

concurrency: # aborts tests for any new commits to ref and starts new process
  group: '${{ github.workflow }} - ${{ github.event.client_payload.environment }}'
  cancel-in-progress: true

env:
  NODE_VERSION: '16.13.2' # should match version in .nvmrc
  status-context: 'Playwright e2e'

on:
  repository_dispatch: # Only triggers workflow from master
    types:
      - 'End-to-end Tests'

jobs:
  deployment-status:
    name: e2e Checks
    uses: elastic/elastic-charts/.github/workflows/e2e_checks.reusable.yml@master
    with:
      sha: ${{ github.event.client_payload.commit_sha }}
      environment_url: ${{ github.event.client_payload.environment_url }}
      current_run_url: "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
      status-context: Playwright e2e # should match env.status-context, gh doesn't allow env in job.with scope :(
      environment: "${{ github.event.client_payload.environment }}"
      deployment_id: "${{ github.event.client_payload.deployment_id }}"

    # runs-on: ubuntu-latest
    # steps:
    #   - run: echo "Placeholder"

#########################################################################################################

  e2e-setup:
    name: e2e Setup
    runs-on: ubuntu-latest
    needs: deployment-status
    if: ${{ success() }}
    outputs:
      test-files: ${{ steps.test-files.outputs.json }}
      playwright-version: ${{ steps.playwright.outputs.version }}
    steps: # TODO: cleanup this logic without python and shell scripts
      - name: Checkout & Setup node
        uses: nickofthyme/checkout-node-setup@v1
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.client_payload.sha }}
          skip-npm-install: true
      - name: Get test file paths
        id: test-files
        shell: python
        run: |
          import os, glob, json
          os.chdir('e2e/tests')
          files = glob.glob('**/*.test.ts', recursive=True)
          print(f"::set-output name=json::{json.dumps(files)}")
      - name: Get Playwright version
        id: playwright
        run: |
          regex="@playwright/test@(.+)"
          result="$(cd e2e && yarn list --pattern "@playwright/test" --depth=0 | grep playwright/test)"
          if [[ $result =~ $regex ]]
          then
            echo "::set-output name=version::${BASH_REMATCH[1]}"
          else
            echo "Unable to find '@playwright/test' version"
            exit 1
          fi
      - name: Print files
        run: echo "${{ steps.test-files.outputs.json }}"
      - name: Print version
        run: echo "${{ steps.playwright.outputs.version }}"

  e2e:
    name: 'e2e Test / ${{ matrix.test-file }} / ${{ matrix.browser }}'
    runs-on: ubuntu-latest
    needs: e2e-setup
    strategy:
      fail-fast: false
      max-parallel: 10 # TODO: test how performant this is
      matrix:
        test-file: ${{ fromJSON(needs.e2e-setup.outputs.test-files) }}
        browser: ['Chrome']
        # browser: ['chrome', 'Safari', 'Firefox']
    container:
      image: mcr.microsoft.com/playwright:v${{ needs.e2e-setup.outputs.playwright-version }}-focal
    steps:
      - name: Checkout & Setup node
        uses: nickofthyme/checkout-node-setup@v1
        with:
          working-directory: e2e
      - name: Test run
        working-directory: e2e
        run: yarn test --project=${{ matrix.browser }} ./tests/${{ matrix.test-file }}

  e2e-status-success:
    name: e2e Status
    if: ${{ success() }}
    needs: e2e
    runs-on: ubuntu-latest
    env:
      current_run_url: "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
    steps:
      - name: Print needs context
        shell: python
        run: |
          print("""${{ toJSON(needs) }}""")
      - name: Handle successful deployment
        uses: octokit/request-action@v2.x
        with:
          # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
          route: POST /repos/{repo}/statuses/{sha}
          repo: ${{ github.repository }}
          sha: ${{ github.event.client_payload.commit_sha }}
          context: ${{ env.status-context }}
          state: 'success'
          description: 'All tests passed!'
          target_url: ${{ env.current_run_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  e2e-status-failure:
    name: e2e Status
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - name: Handle successful deployment
        uses: octokit/request-action@v2.x
        with:
          # https://docs.github.com/en/rest/reference/commits#create-a-commit-status
          route: POST /repos/{repo}/statuses/{sha}
          repo: ${{ github.repository }}
          sha: ${{ github.event.client_payload.commit_sha }}
          context: ${{ env.status-context }}
          state: 'success'
          description: 'Some tests failed'
          target_url: ${{ env.current_run_url }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#########################################################################################################

  failure-check:
    name: Print context on failure
    # if: ${{ failure() }} # TODO this
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [deployment-status, e2e-setup, e2e]
    steps:
      - name: Print github context
        shell: python
        run: |
          print("""${{ toJSON(github) }}""")
      - name: Print needs context
        shell: python
        run: |
          print("""${{ toJSON(needs) }}""")

#########################################################################################################
