#########################################################################################################
# Handles deployment of key branches to firebase
#
# expected inputs via client_payload
#  - sha
#  - environment
#  - branch_name
#########################################################################################################

name: Branch Deployment

concurrency:
  group: '${{ github.workflow }} - ${{ github.event.client_payload.environment }}'
  cancel-in-progress: true

env:
  NODE_VERSION: '16.13.2' # should match version in .nvmrc

on:
  repository_dispatch: # Only triggers workflow from master
    types:
      - 'Deployment | Branch'

jobs:
  build-deploy:
    name: "Deploy | ${{ github.event.client_payload.environment }}"
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.client_payload.environment }}
    outputs:
      environment_url: https://ech-e2e-ci--alpha-zfvo4b6u.web.app # TODO this
      # environment_url: ${{ steps.deploy.outputs.details_url }}
    steps:
      - run: echo "Placeholder"

      # - name: Checkout & Setup node
      #   uses: nickofthyme/checkout-node-setup@v1
      #   with:
      #     repository: ${{ github.repo }}
      #     ref: ${{ github.event.client_payload.sha }} # github context always points to latest master
      #     # See https://github.com/bahmutov/npm-install/issues/80
      #     skip-npm-install: true # This fails on deployment events
      # - run: yarn install --frozen-lockfile # TODO: fix caching

#########################################################################################################

      # - name: Building storybook
      #   working-directory: storybook
      #   run: yarn build:firebase # Outputs build to /e2e-server/public
      # - name: Generate e2e server files
      #   run: yarn test:e2e:generate
      # - name: Build e2e server inside storybook output directory
      #   run: yarn test:e2e:server:build -o '../public/e2e' # Outputs build to /e2e-server/public/e2e

#########################################################################################################

      # - name: Deploy build to firebase
      #   id: deploy
      #   uses: FirebaseExtended/action-hosting-deploy@v0
      #   with:
      #     expires: 14d # this updates for every new deployment
      #     entryPoint: 'e2e-server'
      #     repoToken: '${{ secrets.GITHUB_TOKEN }}'
      #     # New project on elastic's GCP org
      #     # See https://console.cloud.google.com/iam-admin/iam?project=ech-e2e-ci
      #     firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECH_E2E_CI }}'
      #     projectId: 'ech-e2e-ci'
      #     channelId: ${{ github.event.client_payload.branch_name }} # e.g. next, v40.0.0, etc.

      # - name: Outputs # TODO: remove
      #   shell: python
      #   run: |
      #     print("""${{ toJSON(steps.deploy.outputs) }}""")

#########################################################################################################

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: build-deploy
    steps:
      - name: Update deployment status with environment url
        uses: actions/github-script@v5
        with:
          script: | # This is javascript :)
            const { data: [deployment]} = await github.rest.repos.listDeployments({
              ...context.repo,
              task: "deploy",
              per_page: 1,
              sha: "${{ github.event.client_payload.sha }}",
              ref: "${{ github.event.client_payload.branch_name }}",
              environment: "${{ github.event.client_payload.environment }}",
            });

            console.log(deployment) // TODO: remove

            if (deployment) {
              await github.rest.repos.createDeploymentStatus({
                ...context.repo,
                state: 'success',
                deployment_id: deployment.id,
                log_url: deployment.log_url,
                environment_url: "${{ needs.build-deploy.outputs.environment_url }}",
              });
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

#########################################################################################################

  trigger-e2e-tests:
    name: Trigger end-to-end tests
    needs: build-deploy
    if: ${{ always() }} # Runs always to update e2e commit status
    runs-on: ubuntu-latest
    steps:
      - name: Trigger e2e test workflow
        uses: actions/github-script@v5
        with:
          # https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event
          script: | # This is javascript :)
            await github.rest.repos.createDispatchEvent({
              ...context.repo,
              event_type: 'End-to-end Tests',
              client_payload: {
                sha: "${{ github.event.client_payload.sha }}",
                commit_sha: "${{ github.event.client_payload.sha }}",
                environment: "${{ github.event.client_payload.environment }}",
                environment_url: "${{ needs.build-deploy.outputs.environment_url }}",
              },
            });
          github-token: ${{ secrets.ADMIN_TOKEN_GH }}

#########################################################################################################

  failure-check:
    name: Print context on failure
    # if: ${{ failure() }} # TODO this
    if: ${{ always() }}
    needs: [build-deploy, cleanup]
    runs-on: ubuntu-latest
    steps:
      - name: Print github context
        shell: python
        run: |
          print("""${{ toJSON(github) }}""")
      - name: Print needs context
        shell: python
        run: |
          print("""${{ toJSON(needs) }}""")

#########################################################################################################
